{"version":3,"sources":["webpack:///./node_modules/terriajs/lib/ReactViews/Map/Navigation/augmented_virtuality_tool.scss","webpack:///./node_modules/terriajs/lib/Models/AugmentedVirtuality.js","webpack:///./node_modules/terriajs/lib/ReactViews/Map/Navigation/AugmentedVirtualityTool.jsx"],"names":["module","exports","_defined","_interopRequireDefault","_defaultValue","_knockout","_Math","_Matrix","_Cartesian","_EllipsoidTerrainProvider","_sampleTerrainMostDetailed","obj","__esModule","AugmentedVirtuality","terria","that","this","_terria","_eventLoopState","_manualAlignment","_maximumUpdatesPerSecond","DEFAULT_MAXIMUM_UPDATES_PER_SECOND","_orientationUpdated","_alpha","_beta","_gamma","_realignAlpha","_realignHeading","_hoverLevel","PRESET_HEIGHTS","length","window","addEventListener","event","_storeOrientation","track","defineProperty","get","_eventLoopRunning","set","enable","resetAlignment","enabled","_startEventLoop","_getManualAlignment","startEnd","_setManualAlignment","maximumUpdatesPerSecond","MINIMUM_HOVER_HEIGHT","prototype","toggleEnabled","toggleManualAlignment","manualAlignment","toggleHoverHeight","hover","height","position","flyTo","cesium","viewer","camera","positionCartographic","clone","scene","terrainProvider","flyToHeight","then","updatedPosition","surfaceHeight","newPosition","fromRadians","longitude","latitude","pose","_getCurrentOrientation","destination","setView","currentViewer","notifyRepaintRequired","moveTo","maximumHeight","cameraPosition","viewerHeight","moveToLocation","undefined","hoverHeight","toDegrees","heading","intervalId","intervalMs","id","setInterval","_updateOrientation","clearInterval","alpha","beta","gamma","screenOrientation","_getCurrentScreenOrientation","_lastScreenOrientation","realignAlpha","realignHeading","_computeTerriaOrientation","rotationIncrement","rotation","IDENTITY","fromRotationZ","toRadians","multiply","fromRotationX","fromRotationY","r10","COLUMN1ROW0","r11","COLUMN1ROW1","r02","COLUMN0ROW2","r12","COLUMN1ROW2","r22","COLUMN2ROW2","Math","atan2","roll","pitch","sqrt","orientation","screen","angle","_react","_createReactClass","_propTypes","_ObserveModelMixin","_augmented_virtuality_tool","_Icon","_ViewerMode","_reactI18next","_AugmentedVirtuality","AugmentedVirtualityTool","displayName","mixins","propTypes","object","isRequired","viewState","experimentalWarning","bool","t","func","getInitialState","augmentedVirtuality","props","experimentalWarningShown","realignHelpShown","resetRealignHelpShown","handleClickAVTool","state","setState","notifications","push","title","message","confirmText","handleClickRealign","img","handleClickResetRealign","handleClickHover","render","toggleImage","GLYPHS","arOff","toggleStyle","btn","arOn","btnPrimary","realignment","realignmentStyle","btnBlink","hoverLevel","hoverImage","arHover0","arHover1","arHover2","viewerMode","Leaflet","createElement","className","augmentedVirtualityTool","type","onClick","glyph","key","manualAlignmentSet","arRealign","arResetAlignment","withTranslation"],"mappings":"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","file":"4.TerriaMap.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"btn\":\"tjs-augmented_virtuality_tool__btn tjs-_buttons__btn tjs-_buttons__btn tjs-nav__btn tjs-_buttons__btn\",\"btn-primary\":\"tjs-augmented_virtuality_tool__btn-primary tjs-_buttons__btn tjs-_buttons__btn tjs-nav__btn tjs-_buttons__btn\",\"btnPrimary\":\"tjs-augmented_virtuality_tool__btn-primary tjs-_buttons__btn tjs-_buttons__btn tjs-nav__btn tjs-_buttons__btn\",\"btn-blink\":\"tjs-augmented_virtuality_tool__btn-blink tjs-_buttons__btn tjs-_buttons__btn tjs-nav__btn tjs-_buttons__btn\",\"btnBlink\":\"tjs-augmented_virtuality_tool__btn-blink tjs-_buttons__btn tjs-_buttons__btn tjs-nav__btn tjs-_buttons__btn\",\"btn-primary--hover\":\"tjs-augmented_virtuality_tool__btn-primary--hover\",\"btnPrimaryHover\":\"tjs-augmented_virtuality_tool__btn-primary--hover\",\"blinker\":\"tjs-augmented_virtuality_tool__blinker\",\"toolButton\":\"tjs-augmented_virtuality_tool__toolButton\",\"augmentedVirtualityTool\":\"tjs-augmented_virtuality_tool__augmentedVirtualityTool tjs-tool_button__toolButton\"};","\"use strict\";\n\nvar _defined = _interopRequireDefault(require(\"terriajs-cesium/Source/Core/defined\"));\n\nvar _defaultValue = _interopRequireDefault(require(\"terriajs-cesium/Source/Core/defaultValue\"));\n\nvar _knockout = _interopRequireDefault(require(\"terriajs-cesium/Source/ThirdParty/knockout\"));\n\nvar _Math = _interopRequireDefault(require(\"terriajs-cesium/Source/Core/Math.js\"));\n\nvar _Matrix = _interopRequireDefault(require(\"terriajs-cesium/Source/Core/Matrix3.js\"));\n\nvar _Cartesian = _interopRequireDefault(require(\"terriajs-cesium/Source/Core/Cartesian3.js\"));\n\nvar _EllipsoidTerrainProvider = _interopRequireDefault(require(\"terriajs-cesium/Source/Core/EllipsoidTerrainProvider\"));\n\nvar _sampleTerrainMostDetailed = _interopRequireDefault(require(\"terriajs-cesium/Source/Core/sampleTerrainMostDetailed\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\n/**\n * Manages state for Augmented Virtuality mode.\n *\n * This mode uses the devices orientation sensors to change the viewers viewport to match the change in orientation.\n *\n * Term Augmented Virtuality:\n * \"The use of real-world sensor information (e.g., gyroscopes) to control a virtual environment is an additional form\n * of augmented virtuality, in which external inputs provide context for the virtual view.\"\n * {@link https://en.wikipedia.org/wiki/Mixed_reality}\n *\n * @alias AugmentedVirtuality\n * @constructor\n */\nvar AugmentedVirtuality = function AugmentedVirtuality(terria) {\n  var that = this;\n  this._terria = terria; // Note: We create a persistant object and define a transient property, since knockout needs a persistant variable\n  //       to track, but for state we want a 'maybe' intervalId.\n\n  this._eventLoopState = {};\n  this._manualAlignment = false;\n  this._maximumUpdatesPerSecond = AugmentedVirtuality.DEFAULT_MAXIMUM_UPDATES_PER_SECOND;\n  this._orientationUpdated = false;\n  this._alpha = 0;\n  this._beta = 0;\n  this._gamma = 0;\n  this._realignAlpha = 0;\n  this._realignHeading = 0; // Set the default height to be the last height so that when we first toggle (and increment) we cycle and go to the first height.\n\n  this._hoverLevel = AugmentedVirtuality.PRESET_HEIGHTS.length - 1; // Always run the device orientation event, this way as soon as we enable we know where we are and set the\n  // orientation rather then having to wait for the next update.\n  // The following is disabled because chrome does not currently support deviceorientationabsolute correctly:\n  // if ('ondeviceorientationabsolute' in window)\n  // {\n  //     window.addEventListener('deviceorientationabsolute', function(event) {that._orientationUpdate(event);} );\n  // }\n  // else\n\n  if (\"ondeviceorientation\" in window) {\n    window.addEventListener(\"deviceorientation\", function (event) {\n      that._storeOrientation(event);\n    });\n  } // Make the variables used by the object properties knockout observable so that changes in the state notify the UI\n  // and cause a UI update. Note: These are all of the variables used just by the getters (not the setters), since\n  // these unqiquely define what the current state is and are the only things that can effect/cause the state to change\n  // (note: _eventLoopState is hidden behind ._eventLoopRunning() ).\n\n\n  _knockout[\"default\"].track(this, [\"_eventLoopState\", \"_manualAlignment\", \"_maximumUpdatesPerSecond\", \"_realignAlpha\", \"_realignHeading\", \"_hoverLevel\"]); // Note: The following properties are defined as knockout properties so that they can be used to trigger updates on the UI.\n\n  /**\n   * Gets or sets whether Augmented Virtuality mode is currently enabled (true) or not (false).\n   *\n   * Note: If {@link AugmentedVirtuality#manualAlignment} is enabled and the state is changed it will be disabled.\n   *\n   * @memberOf AugmentedVirtuality.prototype\n   * @member {Boolean} enabled\n   */\n\n\n  _knockout[\"default\"].defineProperty(this, \"enabled\", {\n    get: function get() {\n      return this._eventLoopRunning() || this._manualAlignment;\n    },\n    set: function set(enable) {\n      if (enable !== true) {\n        enable = false;\n        this.resetAlignment();\n      }\n\n      if (enable !== this.enabled) {\n        // If we are changing the enabled state then disable manual alignment.\n        // We only do this if we are changing the enabled state so that the client can repeatedly call the\n        // setting without having any effect if they aren't changing the enabled state, but so that every time\n        // that the state is changed that the manual alignment is turned back off initally.\n        this._manualAlignment = false;\n\n        this._startEventLoop(enable);\n      }\n    }\n  });\n  /**\n   * Gets or sets whether manual realignment mode is currently enabled (true) or not (false).\n   *\n   * @memberOf AugmentedVirtuality.prototype\n   * @member {Boolean} manualAlignment\n   */\n\n\n  _knockout[\"default\"].defineProperty(this, \"manualAlignment\", {\n    get: function get() {\n      return this._getManualAlignment();\n    },\n    set: function set(startEnd) {\n      this._setManualAlignment(startEnd);\n    }\n  });\n  /**\n   * Gets whether a manual realignment has been specified (true) or not (false).\n   *\n   * @memberOf AugmentedVirtuality.prototype\n   * @member {Boolean} manualAlignmentSet\n   */\n\n\n  _knockout[\"default\"].defineProperty(this, \"manualAlignmentSet\", {\n    get: function get() {\n      return this._realignAlpha !== 0.0 || this._realignHeading !== 0.0;\n    }\n  });\n  /**\n   * Gets the index of the current hover level.\n   *\n   * Use <code>AugmentedVirtuality.PRESET_HEIGHTS.length</code> to find the total avaliable levels.\n   *\n   * @memberOf AugmentedVirtuality.prototype\n   * @member {int} hoverLevel\n   */\n\n\n  _knockout[\"default\"].defineProperty(this, \"hoverLevel\", {\n    get: function get() {\n      return this._hoverLevel;\n    }\n  });\n  /**\n   * Gets or sets the the maximum number of times that the camera orientation will be updated per second. This is\n   * the number of camera orientation updates per seconds is capped to (explicitly the number of times the\n   * orientation is updated per second might be less but it won't be more then this number). We want the number of\n   * times that the orientation is updated capped so that we don't consume to much battery life updating to\n   * frequently, but responsiveness is still acceptable.\n   *\n   * @memberOf AugmentedVirtuality.prototype\n   * @member {Float} maximumUpdatesPerSecond\n   */\n\n\n  _knockout[\"default\"].defineProperty(this, \"maximumUpdatesPerSecond\", {\n    get: function get() {\n      return this._maximumUpdatesPerSecond;\n    },\n    set: function set(maximumUpdatesPerSecond) {\n      this._maximumUpdatesPerSecond = maximumUpdatesPerSecond; // If we are currently enabled reset to update the timing interval used.\n\n      if (this._eventLoopRunning()) {\n        this._startEventLoop(false);\n\n        this._startEventLoop(true);\n      }\n    }\n  });\n\n  this.enabled = false;\n};\n/**\n * Gets the the maximum number of times that the camera orientation will be updated per second by default. This is the\n * number of camera orientation updates per seconds is capped to by default (explicitly the number of times the\n * orientation is updated per second might be less but it won't be more then this number). We want the number of times\n * that the orientation is updated capped so that we don't consume to much battery life updating to frequently, but\n * responsiveness is still acceptable.\n */\n\n\nAugmentedVirtuality.DEFAULT_MAXIMUM_UPDATES_PER_SECOND = 10.0;\n/**\n * The minimum height that the viewer is allowed to hover at.\n */\n\nAugmentedVirtuality.MINIMUM_HOVER_HEIGHT = 20.0;\n/* These are the heights that we can toggle through (in meters - above the surface height).\n */\n\nAugmentedVirtuality.PRESET_HEIGHTS = [1000, 250, 20];\n/**\n * Toggles whether the AugmentedVirutuality mode is enabled or disabled.\n */\n\nAugmentedVirtuality.prototype.toggleEnabled = function () {\n  this.enabled = !this.enabled;\n};\n/**\n * Toggles whether manual alignement is enabled or disabled.\n */\n\n\nAugmentedVirtuality.prototype.toggleManualAlignment = function () {\n  this.manualAlignment = !this.manualAlignment;\n};\n/**\n * Resets the alignment so that the alignement matches the devices absolute alignment.\n */\n\n\nAugmentedVirtuality.prototype.resetAlignment = function () {\n  this._orientationUpdated = true;\n  this._realignAlpha = 0;\n  this._realignHeading = 0;\n};\n/**\n * Toggles the viewer between a range of predefined heights, setting the cameras orientation so that it matches the\n * correct orientation.\n */\n\n\nAugmentedVirtuality.prototype.toggleHoverHeight = function () {\n  this._hoverLevel = (this._hoverLevel + 1) % AugmentedVirtuality.PRESET_HEIGHTS.length;\n  this.hover(AugmentedVirtuality.PRESET_HEIGHTS[this._hoverLevel]);\n};\n/**\n * Moves the viewer to a specified height, setting the orientation so that it matches the correct Augmented Virtuality\n * orientation.\n *\n * @param {Float} height The height in Meters above the globe surface. Note: If height is below\n *                       {@link AugmentedVirtuality.MINIMUM_HOVER_HEIGHT} the height will be set to\n *                       {@link AugmentedVirtuality.MINIMUM_HOVER_HEIGHT} to avoid visual artifacts when the viewer\n *                       becomes to close to the surface.\n * @param {Cartographic} [position] The location to hover over. If not specified the current camera location will be used.\n * @param {Boolean} [flyTo=true] Whether to fly to the location (true) or whether to jump to the location (false).\n */\n\n\nAugmentedVirtuality.prototype.hover = function (height, position, flyTo) {\n  var that = this; // Get access to the camera...if it is not avaliable we can't set the new height so just return now.\n\n  if (!(0, _defined[\"default\"])(this._terria.cesium) || !(0, _defined[\"default\"])(this._terria.cesium.viewer) || !(0, _defined[\"default\"])(this._terria.cesium.viewer.camera)) {\n    return;\n  }\n\n  var camera = this._terria.cesium.viewer.camera;\n\n  if (!(0, _defined[\"default\"])(position)) {\n    position = camera.positionCartographic.clone();\n  }\n\n  flyTo = (0, _defaultValue[\"default\"])(flyTo, true); // Clamp the minimum hover height (heights below this value could lead to poor visual artifacts).\n\n  if (height < AugmentedVirtuality.MINIMUM_HOVER_HEIGHT) {\n    height = AugmentedVirtuality.MINIMUM_HOVER_HEIGHT;\n  } // Reset the viewer height.\n\n\n  function flyToHeight(surfaceHeight) {\n    if ((0, _defined[\"default\"])(surfaceHeight)) {\n      height += surfaceHeight;\n    }\n\n    var newPosition = _Cartesian[\"default\"].fromRadians(position.longitude, position.latitude, height);\n\n    var pose = that._getCurrentOrientation();\n\n    pose.destination = newPosition;\n\n    if (flyTo) {\n      camera.flyTo(pose);\n    } else {\n      camera.setView(pose);\n    } // Needed on mobile to make sure that the render is marked as dirty so that once AV mode has been disabled for a\n    // while and then is reenabled the .setView() function still has effect (otherwise dispite the call the .setView()\n    // the view orientation does not visually update until the user manualy moves the camera position).\n\n\n    that._terria.currentViewer.notifyRepaintRequired();\n  } // Get the ground surface height at this location and offset the height by it.\n\n\n  if (!(0, _defined[\"default\"])(this._terria.cesium) || !(0, _defined[\"default\"])(this._terria.cesium.scene) || !(0, _defined[\"default\"])(this._terria.cesium.scene.terrainProvider) || this._terria.cesium.scene.terrainProvider instanceof _EllipsoidTerrainProvider[\"default\"]) {\n    // If we can't get access to the terrain provider or we can get access to the terrain provider and the provider is just the Ellipsoid then use the height of 0.\n    flyToHeight(0);\n  } else {\n    var terrainProvider = this._terria.cesium.scene.terrainProvider;\n    (0, _sampleTerrainMostDetailed[\"default\"])(terrainProvider, [position]).then(function (updatedPosition) {\n      flyToHeight(updatedPosition[0].height);\n    });\n  }\n};\n/**\n * Moves the viewer to a specified location while maintaining the current height and the correct Augmented Virtuality\n * orientation.\n *\n * @param {Cartographic} position The location to hover move to.\n * @param {Float} [maximumHeight] The maximum height (in meters) to cap the current camera height to (if this value is\n *                                specified and the viewer is above this height the camera will be restricted to this height).\n * @param {Boolean} [flyTo] Whether to fly to the location (true) or whether to jump to the location (false).\n *\n * When the manual alignment is enabled this function has no effect.\n */\n\n\nAugmentedVirtuality.prototype.moveTo = function (position, maximumHeight, flyTo) {\n  var that = this; // If we are in manual alignment mode we don't allow the viewer to move (since this would create a jaring UX for most use cases).\n\n  if (this._manualAlignment) {\n    return;\n  } // Get access to the camera...if it is not avaliable we can't get the current height (or set the new location) so just return now.\n\n\n  if (!(0, _defined[\"default\"])(this._terria.cesium) || !(0, _defined[\"default\"])(this._terria.cesium.viewer) || !(0, _defined[\"default\"])(this._terria.cesium.viewer.camera)) {\n    return;\n  }\n\n  var camera = this._terria.cesium.viewer.camera;\n  var cameraPosition = camera.positionCartographic.clone();\n  var viewerHeight = cameraPosition.height; // Reset the viewer height.\n\n  function moveToLocation(surfaceHeight) {\n    if (!(0, _defined[\"default\"])(surfaceHeight)) {\n      surfaceHeight = 0;\n    }\n\n    var hoverHeight = viewerHeight - surfaceHeight;\n\n    if ((0, _defined[\"default\"])(maximumHeight) && hoverHeight > maximumHeight) {\n      hoverHeight = maximumHeight;\n    }\n\n    that.hover(hoverHeight, position, flyTo);\n  } // Get the ground surface height at this location and offset the height by it.\n\n\n  if (!(0, _defined[\"default\"])(this._terria.cesium) || !(0, _defined[\"default\"])(this._terria.cesium.scene) || !(0, _defined[\"default\"])(this._terria.cesium.scene.terrainProvider) || this._terria.cesium.scene.terrainProvider instanceof _EllipsoidTerrainProvider[\"default\"]) {\n    // If we can't get access to the terrain provider or we can get access to the terrain provider and the provider is just the Ellipsoid then use the height of 0.\n    moveToLocation(undefined);\n  } else {\n    var terrainProvider = this._terria.cesium.scene.terrainProvider;\n    (0, _sampleTerrainMostDetailed[\"default\"])(terrainProvider, [cameraPosition]).then(function (updatedPosition) {\n      moveToLocation(updatedPosition[0].height);\n    });\n  }\n};\n/**\n * Whether the user is currently setting a manual alignment.\n *\n * See also {@link AugmentedVirtuality#_setManualAlignment}.\n *\n * @return {Boolean} Whether the user is currently setting a manual alignment (true) or not (false).\n * @private\n */\n\n\nAugmentedVirtuality.prototype._getManualAlignment = function () {\n  return this.enabled && this._manualAlignment;\n};\n/**\n * Starts / stops manual alignment.\n *\n * When manual realignment is enabled it allows the user to specify a new origin for the alignment between the devices\n * physical and virtual alignment. When manual alignment is enabled the orientation is locked, to allow the user to\n * realign a visual landmark with a physical landmark.\n *\n * Note: Manual alignment is only done for the heading axis, this is because in practice we have found that the heading\n * axis is often out as mobile devices seem to have difficulty obtaining the compass direction, but seem to perform\n * relatively well in the other axes.\n *\n * Note: Realignment is only possible when AugmentedVirtuality is enabled. If AugmentedVirtuality is disabled while\n *       manual alignment is in progress it will be cancelled.\n *\n * See also {@link AugmentedVirtuality#_getManualAlignment}.\n *\n * @param {Boolean} startEnd Whether the user is starting (true) or ending (false) the realignment.\n * @private\n */\n\n\nAugmentedVirtuality.prototype._setManualAlignment = function (startEnd) {\n  // Only allow manual alignment changes when the module is enabled.\n  if (this.enabled !== true) {\n    return;\n  } // Sanitise the input value to a boolean.\n\n\n  if (startEnd !== true) {\n    startEnd = false;\n  }\n\n  if (startEnd === false && (0, _defined[\"default\"])(this._terria.cesium) && (0, _defined[\"default\"])(this._terria.cesium.viewer) && (0, _defined[\"default\"])(this._terria.cesium.viewer.camera)) {\n    this._realignAlpha = this._alpha;\n    this._realignHeading = _Math[\"default\"].toDegrees(this._terria.cesium.viewer.camera.heading);\n  }\n\n  if (this._manualAlignment !== startEnd) {\n    this._manualAlignment = startEnd;\n\n    this._startEventLoop(!this._manualAlignment);\n  }\n};\n/**\n * Whether the event loop is currently running.\n *\n * @return {Boolean} enable Whether to start the event loop is currently running (true) or not (false).\n * @private\n */\n\n\nAugmentedVirtuality.prototype._eventLoopRunning = function () {\n  return (0, _defined[\"default\"])(this._eventLoopState.intervalId);\n};\n/**\n * Start or stop the Augmented Virutuality mode event loop. When enabled the orientation will effect the cameras\n * view and when disabled the device orientation will not effect the cameras view.\n *\n * @param {Boolean} enable Whether to start the event loop (true) or stop the event loop (false).\n * @private\n */\n\n\nAugmentedVirtuality.prototype._startEventLoop = function (enable) {\n  // Are we actually changing the state?\n  if (this._eventLoopRunning() !== enable) {\n    if (enable === true) {\n      var that = this;\n      this._orientationUpdated = true;\n      var intervalMs = 1000 / this._maximumUpdatesPerSecond;\n      var id = setInterval(function () {\n        that._updateOrientation();\n      }, intervalMs);\n      this._eventLoopState = {\n        intervalId: id\n      };\n    } else {\n      clearInterval(this._eventLoopState.intervalId);\n      this._eventLoopState = {};\n    }\n  }\n};\n/**\n * Device orientation update event callback function. Stores the updated orientation into the object state.\n *\n * @param {Object} event Contains the updated device orientation (in .alpha, .beta, .gamma).\n * @private\n */\n\n\nAugmentedVirtuality.prototype._storeOrientation = function (event) {\n  this._alpha = event.alpha;\n  this._beta = event.beta;\n  this._gamma = event.gamma;\n  this._orientationUpdated = true;\n};\n/**\n * This function updates the cameras orientation using the last orientation recorded and the current screen orientation.\n *\n * @private\n */\n\n\nAugmentedVirtuality.prototype._updateOrientation = function () {\n  // Check if the screen orientation has changed and mark the orientation updated if it has.\n  var screenOrientation = this._getCurrentScreenOrientation();\n\n  if (screenOrientation !== this._lastScreenOrientation) {\n    this._orientationUpdated = true;\n  }\n\n  this._lastScreenOrientation = screenOrientation; // Optomise by only updating the camera view if some part of the orientation calculation has changed.\n\n  if (!this._orientationUpdated) {\n    // The orientation has not been updated so don't waste time changing the orientation.\n    return;\n  }\n\n  this._orientationUpdated = false; // Get access to the camera...if it is not avaliable we can't set the orientation so just return now.\n\n  if (!(0, _defined[\"default\"])(this._terria.cesium) || !(0, _defined[\"default\"])(this._terria.cesium.viewer) || !(0, _defined[\"default\"])(this._terria.cesium.viewer.camera)) {\n    return;\n  }\n\n  var camera = this._terria.cesium.viewer.camera;\n  camera.setView(this._getCurrentOrientation(screenOrientation)); // Needed on mobile to make sure that the render is marked as dirty so that once AV mode has been disabled for a\n  // while and then is reenabled the .setView() function still has effect (otherwise dispite the call the .setView()\n  // the view orientation does not visually update until the user manualy moves the camera position).\n\n  this._terria.currentViewer.notifyRepaintRequired();\n};\n/**\n * Gets the current orientation stored in the object state and returns the roll, pitch and heading which can be used to set the cameras orientation.\n *\n * @param {Float} screenOrientation The screen orientation in degrees. Note: This field is optional, if supplied this value will be used for the screen orientation, otherwise the screen orientation will be obtained during the execution of this function.\n * @return {Object} A object with the roll, pitch and heading stored into the orientation.\n * @private\n */\n\n\nAugmentedVirtuality.prototype._getCurrentOrientation = function (screenOrientation) {\n  var alpha = this._alpha;\n  var beta = this._beta;\n  var gamma = this._gamma;\n  var realignAlpha = this._realignAlpha;\n  var realignHeading = this._realignHeading;\n\n  if (!(0, _defined[\"default\"])(screenOrientation)) {\n    screenOrientation = this._getCurrentScreenOrientation();\n  }\n\n  return this._computeTerriaOrientation(alpha, beta, gamma, screenOrientation, realignAlpha, realignHeading);\n};\n/**\n * Turns the orientation in the device frame of reference into an orientation suitable for specifying the Terria camera orientation.\n *\n * @param {Float} alpha The alpha value of the device orientation in degrees (this is the alpha value in the device's frame of reference).\n * @param {Float} beta  The beta  value of the device orientation in degrees (this is the beta  value in the device's frame of reference).\n * @param {Float} gamma The gamma value of the device orientation in degrees (this is the gamma value in the device's frame of reference).\n * @param {Float} screenOrientation The screen orientation in degrees.\n * @param {Float} realignAlpha   The value of the alpha   value the last time realignment was completed (supply zero if realignment is not supported).\n * @param {Float} realignHeading The value of the heading value the last time realignment was completed (supply zero if realignment is not supported).\n * @return {Object} An object with the roll, pitch and heading stored into the orientation.\n * @private\n */\n\n\nAugmentedVirtuality.prototype._computeTerriaOrientation = function (alpha, beta, gamma, screenOrientation, realignAlpha, realignHeading) {\n  // Note: The algorithmic formulation in this function is for simplicity of mathematical expression, readability,\n  //       maintainability and modification (i.e. it is easy to understand how to update or insert new offsets or features).\n  //       This is not the simplest form which clearly flows from the current formuleation and clearly simplify the\n  //       logic and operations but would increase the cost of future modifications and reduce the readability of the\n  //       expression. It is not anticipated that the current verbose implementation would have a significant impact\n  //       on performance or accuracy, but obviously there will be some impact on both and it can be simplified in\n  //       future if needed.\n  var rotation = _Matrix[\"default\"].clone(_Matrix[\"default\"].IDENTITY, rotation);\n\n  var rotationIncrement; // Roll - Counteract the change in the (orientation) frame of reference when the screen is rotated and the\n  //        rotation lock is not on (the browser reorients the frame of reference to align with the new screen\n  //        orientation - where as we want it of the device relative to the world).\n\n  rotationIncrement = _Matrix[\"default\"].fromRotationZ(_Math[\"default\"].toRadians(screenOrientation));\n\n  _Matrix[\"default\"].multiply(rotation, rotationIncrement, rotation); // Pitch - Align the device orientation frame with the ceasium orientation frame.\n\n\n  rotationIncrement = _Matrix[\"default\"].fromRotationX(_Math[\"default\"].toRadians(90));\n\n  _Matrix[\"default\"].multiply(rotation, rotationIncrement, rotation); // Roll - Apply the deivce roll.\n\n\n  rotationIncrement = _Matrix[\"default\"].fromRotationZ(_Math[\"default\"].toRadians(gamma));\n\n  _Matrix[\"default\"].multiply(rotation, rotationIncrement, rotation); // Pitch - Apply the deivce pitch.\n\n\n  rotationIncrement = _Matrix[\"default\"].fromRotationX(_Math[\"default\"].toRadians(-beta));\n\n  _Matrix[\"default\"].multiply(rotation, rotationIncrement, rotation); // Heading - Apply the incremental deivce heading (from when start was last triggered).\n\n\n  rotationIncrement = _Matrix[\"default\"].fromRotationY(_Math[\"default\"].toRadians(-(alpha - realignAlpha)));\n\n  _Matrix[\"default\"].multiply(rotation, rotationIncrement, rotation); // Heading - Use the offset when the orientation was last started.\n  //           Note: This is logically different from the alpha value and can only be applied here in the same way\n  //                 since Cesium camera is RPH (Heading last - most local). See Cesium camera rotation decomposition\n  //                 for more information on the Cesium camera formuleation.\n\n\n  rotationIncrement = _Matrix[\"default\"].fromRotationY(_Math[\"default\"].toRadians(realignHeading));\n\n  _Matrix[\"default\"].multiply(rotation, rotationIncrement, rotation); // Decompose rotation matrix into roll, pitch and heading to supply to Cesium camera.\n  //\n  // Use notation:\n  //     R = Roll, P = Pitch, H = Heading\n  //     SH = Sin(Heading), CH = Cos(Heading)\n  //\n  // Ceasium camera rotation = RPH:\n  //     [ CR, -SR,   0][  1,   0,   0][ CH,   0,  SH]   [CRCH-SRSPSH, -SRCP, CRSH-SRSPCH]\n  //     [ SR,  CR,   0][  0,  CP,  SP][  0,   1,   0] = [SRCH-CRSPSH,  CRCP, SRSH+CRSPCH]\n  //     [  0,   0,   1][  0, -SP,  CP][-SH,   0,  CH]   [   -CPSH   ,   -SP,    CPCH    ]\n  //     Note: The sign difference of the Sin terms in pitch is different to the standard right handed rotation since\n  //           Cesium rotates pitch in the left handed direction. Both heading and roll are right handed rotations.\n  //\n  // Use the following notation to refer to elements in the Cesium camera rotation matrix:\n  //     [R00, R10, R20]\n  //     [R01, R11, R21]\n  //     [R02, R12, R22]\n  //\n  // Also note: Tan(X) = Sin(X) / Cos(X)\n  //\n  // Decompose matrix:\n  //    H = ATan(Tan(H)) = ATan(Sin(H)/Cos(H)) = ATan (SH / CH) = ATan(CPSH/CPCH) = ATan (-R02 / R22)\n  //    R = ATan(Tan(R)) = ATan(Sin(R)/Cos(R)) = ATan (SR / CR) = ATan(SRCP/CRCP) = ATan (-R10 / R11)\n  //    P = ATan(Tan(P)) = ATan(Sin(P)/Cos(P)) = ATan (SP / CP)\n  //                                             SP = -R12\n  //                                             Need to find CP:\n  //                                                 CP = Sqrt(CP^2)\n  //                                                    = Sqrt(CP^2*(CH^2+SH^2))              Since: (Cos@^2 + Sin@^2) = 1\n  //                                                    = Sqrt((CP^2)*(CH^2) + (CP^2)*(SH^2)) Expand\n  //                                                    = Sqrt((CPCH)^2 + (CPSH)^2)           Since: N^2*M^2 = (NM)^2\n  //                                                    = Sqrt(R22^2 + (-R02)^2)              Substitute\n  //                                                    = Sqrt(R22^2 + R02^2)                 Since: (-N)^2 = N^2\n  //  So P = ATan (-R12 / Sqrt(R22^2 + R02^2))\n  // Simplify notation for readability:\n\n\n  var r10 = rotation[_Matrix[\"default\"].COLUMN1ROW0];\n  var r11 = rotation[_Matrix[\"default\"].COLUMN1ROW1];\n  var r02 = rotation[_Matrix[\"default\"].COLUMN0ROW2];\n  var r12 = rotation[_Matrix[\"default\"].COLUMN1ROW2];\n  var r22 = rotation[_Matrix[\"default\"].COLUMN2ROW2];\n\n  var heading = _Math[\"default\"].toDegrees(Math.atan2(-r02, r22));\n\n  var roll = _Math[\"default\"].toDegrees(Math.atan2(-r10, r11));\n\n  var pitch = _Math[\"default\"].toDegrees(Math.atan2(-r12, Math.sqrt(r02 * r02 + r22 * r22))); // Create an object with the roll, pitch and heading we just computed.\n\n\n  return {\n    orientation: {\n      roll: _Math[\"default\"].toRadians(roll),\n      pitch: _Math[\"default\"].toRadians(pitch),\n      heading: _Math[\"default\"].toRadians(heading)\n    }\n  };\n};\n/**\n * Gets the current screen orientation.\n *\n * @return {Object} The current screen orientation in degrees.\n * @private\n */\n\n\nAugmentedVirtuality.prototype._getCurrentScreenOrientation = function () {\n  if ((0, _defined[\"default\"])(screen.orientation) && (0, _defined[\"default\"])(screen.orientation.angle)) {\n    return screen.orientation.angle;\n  }\n\n  if ((0, _defined[\"default\"])(window.orientation)) {\n    return window.orientation;\n  }\n\n  return 0;\n};\n\nmodule.exports = AugmentedVirtuality;","\"use strict\";\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _createReactClass = _interopRequireDefault(require(\"create-react-class\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _ObserveModelMixin = _interopRequireDefault(require(\"../../ObserveModelMixin\"));\n\nvar _augmented_virtuality_tool = _interopRequireDefault(require(\"./augmented_virtuality_tool.scss\"));\n\nvar _Icon = _interopRequireDefault(require(\"../../Icon\"));\n\nvar _ViewerMode = _interopRequireDefault(require(\"../../../Models/ViewerMode\"));\n\nvar _defined = _interopRequireDefault(require(\"terriajs-cesium/Source/Core/defined\"));\n\nvar _reactI18next = require(\"react-i18next\");\n\nvar _AugmentedVirtuality = _interopRequireDefault(require(\"../../../Models/AugmentedVirtuality\"));\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { \"default\": obj }; }\n\nvar AugmentedVirtualityTool = (0, _createReactClass[\"default\"])({\n  displayName: \"AugmentedVirtualityTool\",\n  mixins: [_ObserveModelMixin[\"default\"]],\n  propTypes: {\n    terria: _propTypes[\"default\"].object.isRequired,\n    viewState: _propTypes[\"default\"].object.isRequired,\n    experimentalWarning: _propTypes[\"default\"].bool,\n    t: _propTypes[\"default\"].func.isRequired\n  },\n  getInitialState: function getInitialState() {\n    return {\n      augmentedVirtuality: new _AugmentedVirtuality[\"default\"](this.props.terria),\n      experimentalWarningShown: false,\n      realignHelpShown: false,\n      resetRealignHelpShown: false\n    };\n  },\n  handleClickAVTool: function handleClickAVTool() {\n    // Make the AugmentedVirtuality module avaliable elsewhere.\n    this.props.terria.augmentedVirtuality = this.state.augmentedVirtuality;\n\n    if ((0, _defined[\"default\"])(this.props.experimentalWarning) && this.props.experimentalWarning !== false && !this.state.experimentalWarningShown) {\n      this.setState({\n        experimentalWarningShown: true\n      });\n      var t = this.props.t;\n      this.props.viewState.notifications.push({\n        title: t(\"AR.title\"),\n        message: t(\"AR.experimentalFeatureMessage\"),\n        confirmText: t(\"AR.confirmText\")\n      });\n    }\n\n    this.state.augmentedVirtuality.toggleEnabled();\n  },\n  handleClickRealign: function handleClickRealign() {\n    if (!this.state.realignHelpShown) {\n      this.setState({\n        realignHelpShown: true\n      });\n      var t = this.props.t;\n      this.props.viewState.notifications.push({\n        title: t(\"AR.manualAlignmentTitle\"),\n        message: t(\"AR.manualAlignmentMessage\", {\n          img: '<img width=\"100%\" src=\"./build/TerriaJS/images/ar-realign-guide.gif\" />'\n        }),\n        confirmText: t(\"AR.confirmText\")\n      });\n    }\n\n    this.state.augmentedVirtuality.toggleManualAlignment();\n  },\n  handleClickResetRealign: function handleClickResetRealign() {\n    if (!this.state.resetRealignHelpShown) {\n      this.setState({\n        resetRealignHelpShown: true\n      });\n      var t = this.props.t;\n      this.props.viewState.notifications.push({\n        title: t(\"AR.resetAlignmentTitle\"),\n        message: t(\"AR.resetAlignmentMessage\"),\n        confirmText: t(\"AR.confirmText\")\n      });\n    }\n\n    this.state.augmentedVirtuality.resetAlignment();\n  },\n  handleClickHover: function handleClickHover() {\n    this.state.augmentedVirtuality.toggleHoverHeight();\n  },\n  render: function render() {\n    var enabled = this.state.augmentedVirtuality.enabled;\n    var toggleImage = _Icon[\"default\"].GLYPHS.arOff;\n    var toggleStyle = _augmented_virtuality_tool[\"default\"].btn;\n\n    if (enabled) {\n      toggleImage = _Icon[\"default\"].GLYPHS.arOn;\n      toggleStyle = _augmented_virtuality_tool[\"default\"].btnPrimary;\n    }\n\n    var t = this.props.t;\n    var realignment = this.state.augmentedVirtuality.manualAlignment;\n    var realignmentStyle = _augmented_virtuality_tool[\"default\"].btn;\n\n    if (realignment) {\n      realignmentStyle = _augmented_virtuality_tool[\"default\"].btnBlink;\n    }\n\n    var hoverLevel = this.state.augmentedVirtuality.hoverLevel;\n    var hoverImage = _Icon[\"default\"].GLYPHS.arHover0; // Note: We use the image of the next level that we will be changing to, not the level the we are currently at.\n\n    switch (hoverLevel) {\n      case 0:\n        hoverImage = _Icon[\"default\"].GLYPHS.arHover0;\n        break;\n\n      case 1:\n        hoverImage = _Icon[\"default\"].GLYPHS.arHover1;\n        break;\n\n      case 2:\n        hoverImage = _Icon[\"default\"].GLYPHS.arHover2;\n        break;\n    }\n\n    return this.props.terria.viewerMode !== _ViewerMode[\"default\"].Leaflet ? _react[\"default\"].createElement(\"div\", {\n      className: _augmented_virtuality_tool[\"default\"].augmentedVirtualityTool\n    }, _react[\"default\"].createElement(\"button\", {\n      type: \"button\",\n      className: toggleStyle,\n      title: t(\"AR.arTool\"),\n      onClick: this.handleClickAVTool\n    }, _react[\"default\"].createElement(_Icon[\"default\"], {\n      glyph: toggleImage\n    })), enabled ? [_react[\"default\"].createElement(\"button\", {\n      type: \"button\",\n      className: _augmented_virtuality_tool[\"default\"].btn,\n      title: t(\"AR.btnHover\"),\n      onClick: this.handleClickHover,\n      key: \"0\"\n    }, _react[\"default\"].createElement(_Icon[\"default\"], {\n      glyph: hoverImage\n    })), !this.state.augmentedVirtuality.manualAlignmentSet ? _react[\"default\"].createElement(\"button\", {\n      type: \"button\",\n      className: realignmentStyle,\n      title: t(\"AR.btnRealign\"),\n      onClick: this.handleClickRealign,\n      key: \"1\"\n    }, _react[\"default\"].createElement(_Icon[\"default\"], {\n      glyph: _Icon[\"default\"].GLYPHS.arRealign\n    })) : null, this.state.augmentedVirtuality.manualAlignmentSet && !realignment ? _react[\"default\"].createElement(\"button\", {\n      type: \"button\",\n      className: _augmented_virtuality_tool[\"default\"].btn,\n      title: t(\"AR.btnResetRealign\"),\n      onClick: this.handleClickResetRealign,\n      key: \"2\"\n    }, _react[\"default\"].createElement(_Icon[\"default\"], {\n      glyph: _Icon[\"default\"].GLYPHS.arResetAlignment\n    })) : null] : null) : null;\n  }\n});\nmodule.exports = (0, _reactI18next.withTranslation)()(AugmentedVirtualityTool);"],"sourceRoot":""}